/*
 * Copyright (c) 2010 Samsung Electronics Co., Ltd All Rights Reserved
 *
 * BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * vim:ts=3
*/

//****************************************************************************//
// *****************  EDJE description have 24 patterns **********************//
 //**************************************************************************//
// ------------------
// | --> HERE
// ------------------
 #define DESC_FROM_L( PARAM ) \
   description { state: "default" 0.0; \
      fixed: 1 0; \
      align: 0.0 0.5; \
      rel2.relative: 0.0 1.0; \
      PARAM \
   }

// ------------------
//         HERE <-- |
// ------------------
 #define DESC_FROM_R( PARAM ) \
   description { state: "default" 0.0; \
      fixed: 1 0; \
      align: 1.0 0.5; \
      rel1.relative: 1 0; \
      PARAM \
   }

// ----------
// |  HERE  |
// ----------
// |        |
// ----------
 #define DESC_FROM_T( PARAM ) \
   description { state: "default" 0.0; \
      fixed: 0 1; \
      align: 0.5 0.0; \
      rel2.relative: 1.0 0.0; \
      PARAM \
   }

// ----------
// |  HERE  |
// ----------
// |        |
// ----------
 #define DESC_FROM_B( PARAM ) \
   description { state: "default" 0.0; \
      fixed: 0 1; \
      rel1.relative: 0.0 1.0; \
      align: 0.5 1.0; \
      PARAM \
   }

// ------------------
// |  PART == HERE  |
// ------------------
 #define DESC_TO( PART, PARAM ) \
   description { state: "default" 0.0; \
      rel1 { \
         relative: 0 0; \
         to: PART; \
      } \
      rel2 { \
         relative: 1 1; \
         to: PART; \
      } \
      PARAM \
   }

//      |   TOP  |
// ---------------------
// LEFT |  HERE  | RIGHT
// ---------------------
//      | BOTTOM |
#define DESC_LRTB( LEFT, RIGHT, TOP, BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      rel1 { \
         relative: 1 1; \
         to_x: LEFT; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 0 0; \
         to_x: RIGHT; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

// ---------------------
// LEFT |--> HERE
// ---------------------
#define DESC_L( LEFT, PARAM ) \
   description { state: "default" 0.0; \
      align: 0 0.5; \
      fixed: 1 0; \
      rel1 { \
         relative: 1 0; \
         to_x: LEFT; \
      } \
      rel2 { \
         relative: 1 1; \
         to_x: LEFT; \
      } \
      PARAM \
   }

// ---------------------
//   HERE  <--| RIGHT
// ---------------------
#define DESC_R( RIGHT, PARAM ) \
   description { state: "default" 0.0; \
      align: 1 0.5; \
      fixed: 1 0; \
      rel1 { \
         relative: 0 0; \
         to_x: RIGHT; \
      } \
      rel2 { \
         relative: 0 1; \
         to_x: RIGHT; \
      } \
      PARAM \
   }

// --------------------------
// LEFT |--> HERE  <--| RIGHT
// --------------------------
#define DESC_LR( LEFT, RIGHT, PARAM ) \
   description { state: "default" 0.0; \
      rel1 { \
         relative: 1 0; \
         to_x: LEFT; \
      } \
      rel2 { \
         relative: 0 1; \
         to_x: RIGHT; \
      } \
      PARAM \
   }

//   |  TOP     |
// -----------------
//  |  HERE  <--| RIGHT
// -----------------
//  | BOTTOM   |
#define DESC_RTB( RIGHT, TOP, BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      align: 1 0.5; \
      rel1 { \
         relative: 0 1; \
         to_x: RIGHT; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 0 0; \
         to_x: RIGHT; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

// LEFT |  HERE  | RIGHT
// ---------------------
//      | BOTTOM |
#define DESC_LRB( LEFT, RIGHT, BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      align: 0.5 1; \
      rel1 { \
         relative: 1 0; \
         to_x: LEFT; \
         to_y: BOTTOM; \
      } \
      rel2 { \
         relative: 0 0; \
         to_x: RIGHT; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

//      |   TOP  |
// ---------------------
// LEFT |  HERE  | RIGHT
#define DESC_LRT( LEFT, RIGHT, TOP, PARAM ) \
   description { state: "default" 0.0; \
      align: 0.5 0; \
      rel1 { \
         relative: 1 1; \
         to_x: LEFT; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 0 1; \
         to_x: RIGHT; \
         to_y: TOP; \
      } \
      PARAM \
   }

//      |       TOP  |
// ---------------------
// LEFT | -->  HERE  |
#define DESC_LT( LEFT, TOP, PARAM ) \
   description { state: "default" 0.0; \
      align: 0 0; \
      rel1 { \
         relative: 1 1; \
         to_x: LEFT; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 1 1; \
         to_x: LEFT; \
         to_y: TOP; \
      } \
      PARAM \
   }

// LEFT |  --> HERE  |
// ---------------------
//      |     BOTTOM |
#define DESC_LB( LEFT, BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      align: 0 1; \
      rel1 { \
         relative: 1 0; \
         to_x: LEFT; \
         to_y: BOTTOM; \
      } \
      rel2 { \
         relative: 1 0; \
         to_x: LEFT; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

//      |     TOP  |
// ---------------------
// LEFT |--> HERE  |
// ---------------------
//      |   BOTTOM |
#define DESC_LTB( LEFT, TOP, BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      align: 0 0.5; \
      rel1 { \
         relative: 1 1; \
         to_x: LEFT; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 1 0; \
         to_x: LEFT; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

//      |   TOP  |
// ---------------------
//     |  HERE <--| RIGHT
#define DESC_RT( RIGHT, TOP, PARAM ) \
   description { state: "default" 0.0; \
      align: 1 0; \
      rel1 { \
         relative: 0 1; \
         to_x: RIGHT; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 0 1; \
         to_x: RIGHT; \
         to_y: TOP; \
      } \
      PARAM \
   }

//  | HERE <-- | RIGHT
// ---------------------
//  |  BOTTOM  |
#define DESC_RB( RIGHT, BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      align: 1 1; \
      rel1 { \
         relative: 0 0; \
         to_x: RIGHT; \
         to_y: BOTTOM; \
      } \
      rel2 { \
         relative: 0 0; \
         to_x: RIGHT; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

// |   TOP  |
// ----------
// |  HERE  |
// ----------
// | BOTTOM |
#define DESC_TB( TOP, BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      align: 0.5 0.5; \
      rel1 { \
         relative: 0 1; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 1 0; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

// |   TOP  |
// ----------
// |  HERE  |
// ----------
#define DESC_T( TOP, PARAM ) \
   description { state: "default" 0.0; \
      align: 0.5 0.0; \
      rel1 { \
         relative: 0 1; \
         to_y: TOP; \
      } \
      rel2 { \
         relative: 1 1; \
         to_y: TOP; \
      } \
      PARAM \
   }

// ----------
// |  HERE  |
// ----------
// | BOTTOM |
#define DESC_B( BOTTOM, PARAM ) \
   description { state: "default" 0.0; \
      align: 0.5 1.0; \
      rel1 { \
         relative: 0 0; \
         to_y: BOTTOM; \
      } \
      rel2 { \
         relative: 1 0; \
         to_y: BOTTOM; \
      } \
      PARAM \
   }

//****************************************************************************//
//******************************* Part Macros ********************************//
//****************************************************************************//
#define PART(TYPE, NAME, DESCRIPION) \
   part { name: NAME; \
      scale: 1; \
      type: TYPE; \
      DESCRIPION \
   }

//****************************************************************************//
//**************************** Genlist Macros ********************************//
//****************************************************************************//

#define PROLOG_LIST \
   data.item: "treesize" 0; \
   data.item: "flips" "elm.flip.icon elm.flip.content"; \

#define PART_LIST_TITLE_BG \
   PART(RECT, "bg", \
      description { state: "default" 0.0; \
         color: 0 0 0 0; \
      } \
   ) \

#define PART_LIST_GROUPINDEX_BG \
   PART(RECT, "title_bg", \
      description { state: "default" 0.0; \
         color: 0 0 0 0; \
      } \
   ) \

#define PART_CENTER_CHECK \
   PART(SWALLOW, "elm.swallow.center_check", \
      description { state: "default" 0.0; \
         align: 0.5 0.5; \
      } \
   ) \

#define PART_LIST_BG \
   PART(RECT, "bg",  \
      description { state: "default" 0.0; \
         color: 0 0 0 0; \
      } \
   )

#define PART_LIST_EVENT \
   PART(RECT, "event_block", \
      mouse_events: 0; \
      repeat_events: 1; \
      description { state: "default" 0.0; \
         color: 0 0 0 0; \
         visible: 0; \
      } \
      description { state: "blocked" 0.0; \
         color: 0 0 0 0; \
         visible: 1; \
      } \
   )


//**************************** Genlist PADDING *******************************//
#define DESC_LIST_PADDINGS \
   description { state: "decorate" 0.0; \
      inherit: "default" 0.0; \
      min: 0 0; \
      max: 0 0; \
   } \
   description { state: "decorate_reorder" 0.0; \
      inherit: "default" 0.0; \
      min: 0 0; \
      max: 0 0; \
   } \
   description { state: "reorder" 0.0; \
      inherit: "default" 0.0; \
      min: 32 0; \
      max: 32 -1; \
   }

#define PART_LIST_PADDINGS(LEFT_SIZE, RIGHT_SIZE, TOP_SIZE, BOTTOM_SIZE) \
   PART(SPACER, "elm.padding.left", \
      DESC_FROM_L( \
         min: LEFT_SIZE 0; \
         max: LEFT_SIZE -1; \
      ) \
   ) \
   PART(SPACER, "elm.padding.right", \
      DESC_FROM_R( \
         min: RIGHT_SIZE 0; \
         max: RIGHT_SIZE -1; \
      ) \
   ) \
   PART(SPACER, "elm.padding.top", \
      DESC_FROM_T( \
         min: 0 TOP_SIZE; \
         max: -1 TOP_SIZE; \
      ) \
   ) \
   PART(SPACER, "elm.padding.bottom", \
      DESC_FROM_B( \
         min: 0 BOTTOM_SIZE; \
         max: -1 BOTTOM_SIZE; \
      ) \
   )

#define PART_LIST_PADDINGS_FOCUS_BG(LEFT_SIZE, RIGHT_SIZE, TOP_SIZE, BOTTOM_SIZE, HIGHLIGHTED_TOP_SIZE, HIGHLIGHTED_BOTTOM_SIZE, BOTTOM_SIZE_1, FOCUS_BG_TOP_SIZE, FOCUS_BG_BOTTOM_SIZE) \
   PART(SPACER, "elm.padding.left", \
      DESC_FROM_L( \
         min: LEFT_SIZE 0; \
         max: LEFT_SIZE -1; \
      ) \
   ) \
   PART(SPACER, "elm.padding.right", \
      DESC_FROM_R( \
         min: RIGHT_SIZE 0; \
         max: RIGHT_SIZE -1; \
      ) \
   ) \
   PART(SPACER, "elm.padding.top", \
      DESC_FROM_T( \
         min: 0 TOP_SIZE; \
         max: -1 TOP_SIZE; \
      ) \
      description { state: "highlighting" 0.0; \
         inherit: "default" 0.0; \
      } \
      description { state: "highlighted" 0.0; \
         inherit: "highlighting" 0.0; \
         min: 0 HIGHLIGHTED_TOP_SIZE; \
         max: -1 HIGHLIGHTED_TOP_SIZE; \
      } \
   ) \
   PART(SPACER, "elm.padding.bottom", \
      DESC_FROM_B( \
         min: 0 BOTTOM_SIZE; \
         max: -1 BOTTOM_SIZE; \
      ) \
      description { state: "highlighting" 0.0; \
         inherit: "default" 0.0; \
      } \
      description { state: "highlighted" 0.0; \
         inherit: "highlighting" 0.0; \
         min: 0 HIGHLIGHTED_BOTTOM_SIZE; \
         max: -1 HIGHLIGHTED_BOTTOM_SIZE; \
      } \
   ) \
   PART(RECT, "elm.padding.focus_bg.top", \
      DESC_FROM_T( \
         min: 0 FOCUS_BG_TOP_SIZE; \
         max: -1 FOCUS_BG_TOP_SIZE; \
         color: 0 0 0 0; \
      ) \
   ) \
   PART(RECT, "elm.padding.focus_bg.bottom", \
      DESC_FROM_B( \
         min: 0 FOCUS_BG_BOTTOM_SIZE; \
         max: -1 FOCUS_BG_BOTTOM_SIZE; \
         color: 0 0 0 0; \
      ) \
   ) \
   PART(SPACER, "elm.padding.bottom.1", \
      DESC_FROM_B( \
         min: 0 BOTTOM_SIZE_1; \
         max: -1 BOTTOM_SIZE_1; \
      ) \
   )

#define PART_LIST_PADDINGS_FOCUS_BG_MULTILINE(LEFT_SIZE, RIGHT_SIZE, TOP_SIZE, BOTTOM_SIZE, FOCUS_BG_TOP_SIZE, FOCUS_BG_BOTTOM_SIZE) \
   PART(SPACER, "elm.padding.left", \
      DESC_FROM_L( \
         min: LEFT_SIZE 0; \
         max: LEFT_SIZE -1; \
      ) \
   ) \
   PART(SPACER, "elm.padding.right", \
      DESC_FROM_R( \
         min: RIGHT_SIZE 0; \
         max: RIGHT_SIZE -1; \
      ) \
   ) \
   PART(SPACER, "elm.padding.top", \
      DESC_FROM_T( \
         min: 0 TOP_SIZE; \
         max: -1 TOP_SIZE; \
      ) \
   ) \
   PART(SPACER, "elm.padding.bottom", \
      DESC_FROM_B( \
         min: 0 BOTTOM_SIZE; \
         max: -1 BOTTOM_SIZE; \
      ) \
   ) \
   PART(RECT, "elm.padding.focus_bg.top", \
      DESC_FROM_T( \
         min: 0 FOCUS_BG_TOP_SIZE; \
         max: -1 FOCUS_BG_TOP_SIZE; \
         color: 0 0 0 0; \
      ) \
   ) \
   PART(RECT, "elm.padding.focus_bg.bottom", \
      DESC_FROM_B( \
         min: 0 FOCUS_BG_BOTTOM_SIZE; \
         max: -1 FOCUS_BG_BOTTOM_SIZE; \
         color: 0 0 0 0; \
      ) \
   )

//***************************  Slide script ********************************//
#define SLIDING_PER_FPS 3
#define SLIDING_FPS     60.0

#define SLIDE_SCRIPT \
script { \
   public sliding_timer; \
   public end_timer; \
   public text_w; \
   public org_text_w; \
   \
   public init() { \
      slide_stop(); \
      set_int(sliding_timer, 0); \
      set_int(end_timer, 0); \
      set_int(text_w, 0); \
      set_int(org_text_w, 0); \
   } \
   public get_width() { \
      new x, y, w, h; \
      get_geometry(PART:"elm.text", x, y, w, h); \
      set_int(org_text_w, w); \
      \
      set_state(PART:"elm.text", "sliding", 0.0); \
      get_geometry(PART:"elm.text", x, y, w, h); \
      set_int(text_w, w); \
   } \
   public slide_stop() { \
      if (get_int(sliding_timer)) cancel_timer(get_int(sliding_timer)); \
         set_int(sliding_timer, 0); \
      if (get_int(end_timer)) cancel_timer(get_int(end_timer)); \
         set_int(end_timer, 0); \
      set_state(PART:"elm.text", "highlighted", 0.0); \
   } \
   public slide_start(val) { \
      if (val == 0) { \
         get_width(); \
         if (get_int(text_w) < get_int(org_text_w)) { \
            slide_stop(); \
            return; \
         } \
      } \
      custom_state(PART:"elm.text", "sliding", 0.0); \
      set_state_val(PART:"elm.text", STATE_REL1_OFFSET, val, 0); \
      set_state_val(PART:"elm.text", STATE_REL2_OFFSET, val, -1); \
      set_state(PART:"elm.text", "custom", 0.0); \
      val -= SLIDING_PER_FPS; \
      \
      if (val <= -get_int(text_w) + (0.5 * get_int(org_text_w))) { \
         set_int(end_timer, timer(0.5, "ender", 1)); \
     } else \
         set_int(sliding_timer, timer(1.0/SLIDING_FPS, "sliding", val)); \
   } \
}

#define SCRIPT_START_SLIDE_TITLE \
script { \
   public g_duration_1; \
   public g_duration_2; \
   public g_timer_id; \
   public g_anim_id; \
   public g_sliding_start; \
   public g_text_size; \
   public is_sliding; \
   \
   public init() { \
      slide_stop(); \
      set_float(g_duration_1, 0); \
      set_float(g_duration_2, 0); \
      set_int(g_timer_id, 0); \
      set_int(g_anim_id, 0); \
      set_int(g_sliding_start, 0); \
      set_int(g_text_size, 0); \
      set_int(is_sliding, 0); \
   } \
   public set_disabled(val) {} \
   public set_highlighted(val) {} \
   public get_disabled() {} \
   public get_highlighted() {} \
   \
   public slide_first_anim(val, Float:pos) { \
      set_tween_state(PART:"elm.text", pos, "slide", 0.0, "slide_1", 0.0); \
      if (pos >= 1.0) { \
         cancel_anim(get_int(g_anim_id)); \
         set_int(g_anim_id, anim(get_float(g_duration_2), "slide_second_anim", 1)); \
      } \
   } \
   public slide_second_anim(val, Float:pos) { \
      set_tween_state(PART:"elm.text", pos, "slide_2", 0.0, "default", 0.0); \
      if (pos >= 1.0) { \
         slide_stop(); \
      } \
   } \
   public slide_first() { \
      set_int(g_anim_id, anim(get_float(g_duration_1), "slide_first_anim", 1)); \
   } \
   public slide_start(val) { \
      if (!get_int(is_sliding)) { \
         set_int(is_sliding, 1); \
         set_int(g_timer_id, timer(LIST_SLIDING_START_WAITING_TIME, "start", 1)); \
      } \
   } \
   public start() { \
      check_size(); \
      if (get_int(g_sliding_start)) { \
         set_state(PART:"elm.text", "slide", 0.0); \
         get_duration(); \
         custom_state(PART:"elm.padding.slide.end", "default", 0.0); \
         set_state_val(PART:"elm.padding.slide.end", STATE_REL1_OFFSET, get_int(g_text_size), 0); \
         set_state_val(PART:"elm.padding.slide.end", STATE_REL2_OFFSET, get_int(g_text_size)-1, -1); \
         set_state(PART:"elm.padding.slide.end", "custom", 0.0); \
         slide_first(); \
      } \
      else { \
         slide_stop(); \
      }\
   } \
   public slide_stop() { \
      if (get_int(g_timer_id)) { \
         cancel_timer(get_int(g_timer_id)); \
         set_int(g_timer_id, 0); \
      } \
      if (get_int(g_anim_id)) { \
         cancel_anim(get_int(g_anim_id)); \
         set_int(g_anim_id, 0); \
      } \
      set_state(PART:"elm.text", "default", 0.0); \
      set_int(g_sliding_start, 0); \
      set_int(is_sliding, 0); \
   } \
   public check_size() { \
      new x, y, w, w1, h; \
      get_geometry(PART:"elm.text", x, y, w, h); \
      get_geometry(PART:"clipper.text", x, y, w1, h); \
      set_int(g_text_size, w1); \
      if (w1 > 0 && w >= w1) \
         set_int(g_sliding_start, 1); \
      else \
         set_int(g_sliding_start, 0); \
   } \
   public get_duration() { \
      new x, y, w, w1, h; \
      get_geometry(PART:"elm.text", x, y, w, h); \
      get_geometry(PART:"clipper.text", x, y, w1, h); \
      set_float(g_duration_1, w * LIST_SLIDING_SPEED); \
      set_float(g_duration_2, w1 * LIST_SLIDING_SPEED); \
   } \
}

#define SCRIPT_START_SLIDE \
script { \
   public g_duration_1; \
   public g_duration_2; \
   public g_timer_id; \
   public g_anim_id; \
   public g_sliding_start; \
   public g_text_size; \
   public is_disabled; \
   public is_highlighted; \
   \
   public init() { \
      slide_stop(); \
      set_float(g_duration_1, 0); \
      set_float(g_duration_2, 0); \
      set_int(g_timer_id, 0); \
      set_int(g_anim_id, 0); \
      set_int(g_sliding_start, 0); \
      set_int(is_disabled, 0); \
      set_int(is_highlighted, 0); \
   } \
   public set_disabled(val) { \
      set_int(is_disabled, val); \
   } \
   public set_highlighted(val) { \
      set_int(is_highlighted, val); \
   } \
   public get_disabled() { \
      return get_int(is_disabled); \
   } \
   public get_highlighted() { \
      return get_int(is_highlighted); \
   } \
   public slide_first_anim(val, Float:pos) { \
      if (get_disabled()) \
         set_tween_state(PART:"elm.text", pos, "slide_disabled", 0.0, "slide_1_disabled", 0.0); \
      else \
         set_tween_state(PART:"elm.text", pos, "slide", 0.0, "slide_1", 0.0); \
      if (!get_highlighted()) { \
         slide_stop(); \
      } else if (pos >= 1.0) { \
         cancel_anim(get_int(g_anim_id)); \
         set_int(g_anim_id, anim(get_float(g_duration_2), "slide_second_anim", 1)); \
      } \
   } \
   public slide_second_anim(val, Float:pos) { \
      if (get_disabled()) \
         set_tween_state(PART:"elm.text", pos, "slide_2_disabled", 0.0, "disabled", 0.0); \
      else \
         set_tween_state(PART:"elm.text", pos, "slide_2", 0.0, "default", 0.0); \
      if (pos >= 1.0) \
         slide_stop(); \
   } \
   public slide_first() { \
      set_int(g_anim_id, anim(get_float(g_duration_1), "slide_first_anim", 1)); \
   } \
   public slide_start(val) { \
      set_int(g_timer_id, timer(LIST_SLIDING_START_WAITING_TIME + (val / 1000), "start", 1)); \
   } \
   public start() { \
      check_size(); \
      if (get_int(g_sliding_start)) { \
      if (get_disabled()) \
         set_state(PART:"elm.text", "slide_disabled", 0.0); \
      else \
         set_state(PART:"elm.text", "slide", 0.0); \
         get_duration(); \
         custom_state(PART:"elm.padding.slide.end", "default", 0.0); \
         set_state_val(PART:"elm.padding.slide.end", STATE_REL1_OFFSET, get_int(g_text_size), 0); \
         set_state_val(PART:"elm.padding.slide.end", STATE_REL2_OFFSET, get_int(g_text_size)-1, -1); \
         set_state(PART:"elm.padding.slide.end", "custom", 0.0); \
         slide_first(); \
      } \
   } \
   public slide_stop() { \
      if (get_int(g_timer_id)) { \
         cancel_timer(get_int(g_timer_id)); \
         set_int(g_timer_id, 0); \
      } \
      if (get_int(g_anim_id)) { \
         cancel_anim(get_int(g_anim_id)); \
         set_int(g_anim_id, 0); \
      } \
      if (get_disabled()) \
         set_state(PART:"elm.text", "disabled", 0.0); \
      else \
         set_state(PART:"elm.text", "default", 0.0); \
      set_int(g_sliding_start, 0); \
   } \
   public check_size() { \
      new x, y, w, w1, h; \
      get_geometry(PART:"elm.text", x, y, w, h); \
      get_geometry(PART:"clipper.text", x, y, w1, h); \
      set_int(g_text_size, w1); \
      if (w1 > 0 && w >= w1) \
         set_int(g_sliding_start, 1); \
      else \
         set_int(g_sliding_start, 0); \
   } \
   public get_duration() { \
      new x, y, w, w1, h; \
      get_geometry(PART:"elm.text", x, y, w, h); \
      get_geometry(PART:"clipper.text", x, y, w1, h); \
      set_float(g_duration_1, w * LIST_SLIDING_SPEED); \
      set_float(g_duration_2, w1 * LIST_SLIDING_SPEED); \
   } \
}

#define SCRIPT_START_SLIDE_SUB_MULTILINE \
script { \
   public g_duration_1; \
   public g_duration_2; \
   public g_timer_id; \
   public g_anim_id; \
   public g_sliding_start; \
   public g_text_size; \
   public is_disabled; \
   public is_highlighted; \
   \
   public init() { \
      slide_stop(); \
      set_float(g_duration_1, 0); \
      set_float(g_duration_2, 0); \
      set_int(g_timer_id, 0); \
      set_int(g_anim_id, 0); \
      set_int(g_sliding_start, 0); \
      set_int(is_disabled, 0); \
      set_int(is_highlighted, 0); \
   } \
   public set_disabled(val) { \
      set_int(is_disabled, val); \
   } \
   public set_highlighted(val) { \
      set_int(is_highlighted, val); \
   } \
   public get_disabled() { \
      return get_int(is_disabled); \
   } \
   public get_highlighted() { \
      return get_int(is_highlighted); \
   } \
   public slide_first_anim(val, Float:pos) { \
      if (get_disabled()) \
         set_tween_state(PART:"elm.text", pos, "slide_disabled", 0.0, "slide_1_disabled", 0.0); \
      else \
         set_tween_state(PART:"elm.text", pos, "slide", 0.0, "slide_1", 0.0); \
      if (!get_highlighted()) { \
         slide_stop(); \
      } else if (pos >= 1.0) { \
         cancel_anim(get_int(g_anim_id)); \
         set_int(g_anim_id, anim(get_float(g_duration_2), "slide_second_anim", 1)); \
      } \
   } \
   public slide_second_anim(val, Float:pos) { \
      if (get_disabled()) \
         set_tween_state(PART:"elm.text", pos, "slide_2_disabled", 0.0, "highlighted_disabled", 0.0); \
      else \
         set_tween_state(PART:"elm.text", pos, "slide_2", 0.0, "highlighted", 0.0); \
      if (pos >= 1.0) \
         slide_stop(); \
   } \
   public slide_start(val) { \
      set_int(g_timer_id, timer(LIST_SLIDING_START_WAITING_TIME, "start", 1)); \
   } \
   public highlight_anim(val, Float:pos) { \
      if (get_disabled()) \
         set_tween_state(PART:"elm.text", pos, "disabled", 0.0, "highlighted_disabled", 0.0); \
      else \
         set_tween_state(PART:"elm.text", pos, "default", 0.0, "highlighted", 0.0); \
      set_tween_state(PART:"clipper.sub_text", pos, "highlighting", 0.0, "highlighted", 0.0); \
      if (pos >= 1.0) { \
         cancel_anim(get_int(g_anim_id)); \
         set_int(g_timer_id, timer(LIST_SLIDING_START_WAITING_TIME, "start", 1)); \
      } \
   } \
   public unhighlight_anim(val, Float:pos) { \
      if (get_disabled()) \
         set_tween_state(PART:"elm.text", pos, "highlighted_disabled", 0.0, "disabled", 0.0); \
      else \
         set_tween_state(PART:"elm.text", pos, "highlighted", 0.0, "default", 0.0); \
      set_tween_state(PART:"clipper.sub_text", pos, "highlighted", 0.0, "highlighting", 0.0); \
      if (pos >= 1.0) { \
         cancel_anim(get_int(g_anim_id)); \
         set_state(PART:"clipper.sub_text", "default", 0.0); \
      } \
   } \
   public slide_first() { \
      set_int(g_anim_id, anim(get_float(g_duration_1), "slide_first_anim", 1)); \
   } \
   public text_highlight(val) { \
      if(get_int(g_anim_id)) { \
         cancel_anim(get_int(g_anim_id)); \
      } \
      set_state(PART:"elm.text", "default", 0.0); \
      set_state(PART:"clipper.sub_text", "highlighting", 0.0); \
      set_int(g_anim_id, anim(LIST_HIGHLIGHT_DURATION_TIME, "highlight_anim", 1)); \
   } \
   public text_unhighlight(val) { \
      slide_stop(); \
      set_state(PART:"elm.text", "highlighted", 0.0); \
      set_state(PART:"clipper.sub_text", "highlighted", 0.0); \
      set_int(g_anim_id, anim(LIST_UNHIGHLIGHT_DURATION_TIME, "unhighlight_anim", 1)); \
   } \
   public start() { \
      check_size(); \
      if (get_int(g_sliding_start)) { \
         if (get_disabled()) \
            set_state(PART:"elm.text", "slide_disabled", 0.0); \
         else \
            set_state(PART:"elm.text", "slide", 0.0); \
         get_duration(); \
         custom_state(PART:"elm.padding.slide.end", "default", 0.0); \
         set_state_val(PART:"elm.padding.slide.end", STATE_REL1_OFFSET, get_int(g_text_size), 0); \
         set_state_val(PART:"elm.padding.slide.end", STATE_REL2_OFFSET, get_int(g_text_size)-1, -1); \
         set_state(PART:"elm.padding.slide.end", "custom", 0.0); \
         slide_first(); \
      } \
   } \
   public slide_stop() { \
      if (get_int(g_timer_id)) { \
         cancel_timer(get_int(g_timer_id)); \
         set_int(g_timer_id, 0); \
      } \
      if (get_int(g_anim_id)) { \
         cancel_anim(get_int(g_anim_id)); \
         set_int(g_anim_id, 0); \
      } \
      if (get_highlighted()) {\
         if (get_disabled()) \
            set_state(PART:"elm.text", "highlighted_disabled", 0.0); \
         else \
            set_state(PART:"elm.text", "highlighted", 0.0); \
      } else { \
         if (get_disabled()) \
            set_state(PART:"elm.text", "disabled", 0.0); \
         else \
            set_state(PART:"elm.text", "default", 0.0); \
      } \
      set_int(g_sliding_start, 0); \
   } \
   public check_size() { \
      new x, y, w, w1, h; \
      get_geometry(PART:"elm.text", x, y, w, h); \
      get_geometry(PART:"clipper.text", x, y, w1, h); \
      set_int(g_text_size, w1); \
      if (w1 > 0 && w >= w1) \
         set_int(g_sliding_start, 1); \
      else \
         set_int(g_sliding_start, 0); \
   } \
   public get_duration() { \
      new x, y, w, w1, h; \
      get_geometry(PART:"elm.text", x, y, w, h); \
      get_geometry(PART:"clipper.text", x, y, w1, h); \
      set_float(g_duration_1, w * LIST_SLIDING_SPEED); \
      set_float(g_duration_2, w1 * LIST_SLIDING_SPEED); \
   } \
}

//***************************  Genlist Programs ****************************//
#define PROGRAM_LIST_DEFAULT( TARGET ) \
   program { name: "default"; \
      signal: "elm,state,default"; \
      source: "elm"; \
      script { \
         init(); \
         run_program(PROGRAM:"defaulted"); \
         set_mouse_events(PART:"event_block", 0); \
         set_repeat_events(PART:"event_block", 1); \
         set_state(PART:"event_block", "default", 0.0); \
      } \
   } \
   program { name: "defaulted"; \
      action: STATE_SET "default" 0.0; \
      TARGET \
   }

#define PROGRAM_LIST_DISABLE( TARGET ) \
   program { name: "enabled"; \
      signal: "elm,state,enabled"; \
      source: "elm"; \
      action: STATE_SET "default" 0.0; \
      TARGET \
   } \
   program { name: "disabled"; \
      signal: "elm,state,disabled"; \
      source: "elm"; \
      action: STATE_SET "disabled" 0.0; \
      TARGET \
   }

#define PROGRAM_LIST_DISABLE_SLIDE( TARGET ) \
   program { name: "enabled"; \
      signal: "elm,state,enabled"; \
      source: "elm"; \
      action: STATE_SET "default" 0.0; \
      TARGET \
      after: "set_enabled"; \
   } \
   program { name: "set_enabled"; \
      script { \
         set_disabled(0); \
      } \
   } \
   program { name: "disabled"; \
      signal: "elm,state,disabled"; \
      source: "elm"; \
      action: STATE_SET "disabled" 0.0; \
      TARGET \
      after: "set_disabled"; \
   } \
   program { name: "set_disabled"; \
      script { \
         set_disabled(1); \
      } \
   }

#define PROGRAM_LIST_DISABLE_SUB_MULTILINE( TARGET ) \
   program { name: "enabled"; \
      signal: "elm,state,enabled"; \
      source: "elm"; \
      script { \
         if (get_highlighted()) \
            set_state(PART:"elm.text", "highlighted", 0.0); \
         else \
            set_state(PART:"elm.text", "default", 0.0); \
         run_program(PROGRAM:"set_enable"); \
         set_disabled(0); \
      } \
   } \
   program { name: "set_enable"; \
      action: STATE_SET "default" 0.0; \
      TARGET \
   } \
   program { name: "disabled"; \
      signal: "elm,state,disabled"; \
      source: "elm"; \
      script { \
         if (get_highlighted()) \
            set_state(PART:"elm.text", "highlighted_disabled", 0.0); \
         else \
            set_state(PART:"elm.text", "disabled", 0.0); \
         run_program(PROGRAM:"set_disabled"); \
         set_disabled(1); \
      } \
   } \
   program { name: "set_disabled"; \
      action: STATE_SET "disabled" 0.0; \
      TARGET \
   }

#define PROGRAM_LIST_SELECT( TARGET ) \
   program { name: "selected"; \
      signal: "elm,state,selected"; \
      source: "elm"; \
      action: STATE_SET "selected" 0.0; \
      TARGET \
   } \
   program { name: "unselected"; \
      signal: "elm,state,unselected"; \
      source: "elm"; \
      action: STATE_SET "default" 0.0; \
      TARGET \
   }

#define PROGRAM_LIST_HIGHLIGHT_1TEXT \
   program { name: "text_highlight"; \
      signal: "elm,state,highlighted"; \
      source: "elm"; \
      script { \
         if (!get_highlighted()) { \
            set_highlighted(1); \
            run_program(PROGRAM:"text_slide"); \
         } \
      } \
   } \
    program { name: "text_unhighlight"; \
      signal: "elm,state,unhighlighted"; \
      source: "elm"; \
      script { \
         if (get_highlighted()) { \
            set_highlighted(0); \
            slide_stop(); \
         } \
      } \
   } \
   program { name: "text_slide"; \
      source: "elm"; \
      signal: "elm,action,title,slide,start"; \
      script { \
         slide_start(200); \
      } \
   } \
   program { name: "text_slide_stop"; \
      source: "elm"; \
      signal: "elm,action,title,slide,stop"; \
      script { \
         slide_stop(); \
      } \
   }

#define PROGRAM_LIST_HIGHLIGHT(TARGET) \
   program { name: "text_highlight"; \
      signal: "elm,state,highlighted"; \
      source: "elm"; \
      script { \
         if (!get_highlighted()) { \
            set_highlighted(1); \
            run_program(PROGRAM:"text_highlighting"); \
         } \
      } \
   } \
   program { name: "text_highlighting"; \
      action: STATE_SET "highlighting" 0.0; \
      TARGET \
      after: "text_highlighted"; \
   } \
   program { name: "text_highlighted"; \
      transition: CUBIC_BEZIER LIST_HIGHLIGHT_DURATION_TIME 0 0 1 1; \
      action: STATE_SET "highlighted" 0.0; \
      TARGET \
      after: "text_slide"; \
   } \
    program { name: "text_unhighlight"; \
      signal: "elm,state,unhighlighted"; \
      source: "elm"; \
      script { \
         if (get_highlighted()) { \
            set_highlighted(0); \
            slide_stop(); \
            run_program(PROGRAM:"text_unhighlighting"); \
         } \
      } \
   } \
   program { name: "text_unhighlighting"; \
      transition: CUBIC_BEZIER LIST_UNHIGHLIGHT_DURATION_TIME 0 0 1 1; \
      action: STATE_SET "highlighting" 0.0; \
      TARGET \
      after: "text_unhighlighted"; \
   } \
   program { name: "text_unhighlighted"; \
      action: STATE_SET "default" 0.0; \
      TARGET \
   } \
   program { name: "text_slide"; \
      source: "elm"; \
      signal: "elm,action,title,slide,start"; \
      script { \
         slide_start(0); \
      } \
   } \
   program { name: "text_slide_stop"; \
      source: "elm"; \
      signal: "elm,action,title,slide,stop"; \
      script { \
         slide_stop(); \
      } \
   }

#define PROGRAM_LIST_HIGHLIGHT_SUB_MULTILINE \
   program { name: "text_highlight"; \
      signal: "elm,state,highlighted"; \
      source: "elm"; \
      script { \
         if (!get_highlighted()) { \
            set_highlighted(1); \
            text_highlight(0); \
         } \
      } \
   } \
    program { name: "text_unhighlight"; \
      signal: "elm,state,unhighlighted"; \
      source: "elm"; \
      script { \
         if (get_highlighted()) { \
            set_highlighted(0); \
            text_unhighlight(0); \
         } \
      } \
   } \
   program { name: "text_slide"; \
      source: "elm"; \
      signal: "elm,action,title,slide,start"; \
      script { \
         slide_start(0); \
      } \
   } \
   program { name: "text_slide_stop"; \
      source: "elm"; \
      signal: "elm,action,title,slide,stop"; \
      script { \
         slide_stop(); \
      } \
   }

#define PROGRAM_LIST_FOCUS_BG_PRESS \
   program { name: "focus_bg_pressed"; \
      signal: "elm,state,selected"; \
      source: "elm"; \
      script { \
         if (get_highlighted()) { \
            set_state(PART:"focus_bg", "pressed", 0.0); \
         } \
      } \
   } \
   program { name: "focus_bg_unpressed"; \
      signal: "elm,state,unselected"; \
      source: "elm"; \
      script { \
         if (get_highlighted()) { \
            set_state(PART:"focus_bg", "highlighted", 0.0); \
         } else { \
            set_state(PART:"focus_bg", "default", 0.0); \
         } \
      } \
   } \

#define PROGRAM_LIST_SOUND \
   program { name: "play_sound"; \
      signal: "elm,state,clicked"; \
      source: "elm"; \
      script { \
         run_program(PROGRAM:"play_sample"); \
      } \
   } \
   program { \
      name: "play_sample"; \
      action: RUN_PLUGIN "touch_sound"; \
   }

#define PROGRAM_LIST_FOCUS \
   program { name: "focused"; \
      signal: "elm,state,focused"; \
      source: "elm"; \
      action: STATE_SET "focused" 0.0; \
      target: "focus_part"; \
   } \
   program { name: "unfocused"; \
      signal: "elm,state,unfocused"; \
      source: "elm"; \
      action: STATE_SET "default" 0.0; \
      target: "focus_part"; \
   } \

#define PROGRAM_LIST_TEXT_SLIDE \
   program { name: "slide_start"; \
      source: "elm"; \
      signal: "elm,action,title,slide,start"; \
      script { \
         slide_start(0); \
      } \
   } \
   program { name: "text_slide_stop"; \
      source: "elm"; \
      signal: "elm,action,title,slide,stop"; \
      script { \
         slide_stop(); \
      } \
   }

#define PROGRAM_LIST_EVENT \
   program { name: "content_event_disable"; \
      signal: "elm,state,content_event,disable"; \
      source: "elm"; \
      script { \
         set_mouse_events(PART:"event_block", 1); \
         set_repeat_events(PART:"event_block", 0); \
         set_state(PART:"event_block", "blocked", 0.0); \
      } \
   } \
   program { name: "content_event_enable"; \
      signal: "elm,state,content_event,enable"; \
      source: "elm"; \
      script { \
         set_mouse_events(PART:"event_block", 0); \
         set_repeat_events(PART:"event_block", 1); \
         set_state(PART:"event_block", "default", 0.0); \
      } \
   } \
   program { "enable_event_pass"; \
      signal: "elm,event,pass,enabled"; \
      source: "elm"; \
      script { \
         set_mouse_events(PART:"event_block", 0); \
         set_state(PART:"event_block", "default", 0.0); \
      } \
   } \
   program { "disable_event_pass"; \
      signal: "elm,event,pass,disabled"; \
      source:"elm"; \
      script { \
         set_mouse_events(PART:"event_block", 1); \
         set_state(PART:"event_block", "blocked", 0.0); \
      } \
   } \
   program { "enable_event_repeat"; \
      signal: "elm,event,repeat,enabled"; \
      source: "elm"; \
      script { \
         set_repeat_events(PART:"event_block", 1); \
      } \
   } \
   program { "disable_event_repeat"; \
      signal: "elm,event,repeat,disabled"; \
      source:"elm"; \
      script { \
         set_repeat_events(PART:"event_block", 0); \
         set_state(PART:"event_block", "blocked", 0.0); \
      } \
   }

#define PROGRAMS_LIST( TARGET ) \
   programs { \
      PROGRAM_LIST_DEFAULT( TARGET \
         target: "bg"; \
      ) \
      PROGRAM_LIST_DISABLE( TARGET \
         target: "bg"; \
      ) \
      PROGRAM_LIST_SELECT( TARGET \
         target: "bg"; \
      ) \
      PROGRAM_LIST_TEXT_SLIDE \
      PROGRAM_LIST_SOUND \
      PROGRAM_LIST_EVENT \
   }

//******************************* Genlist TEXT ********************************//
#define PARAM_TEXT(STYLE, PARAM) \
   align: 0.5 0.5; \
   text { \
      min: 0 1; \
      max: 1 1; \
      ellipsis: -1.0; \
      fade_ellipsis: 1.0; \
      style: STYLE; \
      PARAM \
   }

#define PARAM_SUB_TEXT(STYLE, PARAM) \
   align: 0.5 1.0; \
   text { \
      min: 0 1; \
      max: 1 1; \
      style: STYLE; \
      PARAM \
   }

#define PARAM_SUB_MULTILINE_TEXT(STYLE, PARAM) \
   align: 0.5 1.0; \
   text { \
      min: 0 1; \
      style: STYLE; \
      PARAM \
   }

#define PART_MAIN_TEXT(NAME, LEFT, RIGHT, TOP, BOTTOM) \
   PART(SPACER, "elm.padding.slide.end", \
      DESC_L(RIGHT, \
         fixed: 1 0; \
         min: 0 0; \
         max: 0 -1; \
      ) \
   ) \
   PART(RECT, "clipper.text", \
      DESC_LRTB(LEFT, RIGHT, TOP, BOTTOM, \
      ) \
   ) \
   PART(TEXTBLOCK, NAME, \
      clip_to: "clipper.text"; \
      DESC_LRTB(LEFT, RIGHT, TOP, BOTTOM, \
         fixed: 1 0; \
         min: 0 LIST_TEXT_MAIN_HEIGHT_INC; \
         PARAM_TEXT("list_text_main_normal",) \
      ) \
      description { state: "disabled" 0.0; \
         inherit: "default" 0.0; \
         text.style: "list_text_main_disabled"; \
      } \
      description { state: "slide" 0.0; \
         inherit: "default" 0.0; \
         align: 0.0 0.5; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 0.0; \
            to_x: LEFT; \
            to_y: BOTTOM; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_1" 0.0; \
         inherit: "default" 0.0; \
         align: 1.0 0.5; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 0.0; \
            to_x: LEFT; \
            to_y: BOTTOM; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_2" 0.0; \
         inherit: "default" 0.0; \
         align: 0.0 0.5; \
         rel1 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 0.0 0.0; \
            to_x: "elm.padding.slide.end"; \
            to_y: BOTTOM; \
         } \
      } \
      description { state: "slide_disabled" 0.0; \
         inherit: "disabled" 0.0; \
         align: 0.0 0.5; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 0.0; \
            to_x: LEFT; \
            to_y: BOTTOM; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_1_disabled" 0.0; \
         inherit: "disabled" 0.0; \
         align: 1.0 0.5; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 0.0; \
            to_x: LEFT; \
            to_y: BOTTOM; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_2_disabled" 0.0; \
         inherit: "disabled" 0.0; \
         align: 0.0 0.5; \
         rel1 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 0.0 0.0; \
            to_x: "elm.padding.slide.end"; \
            to_y: BOTTOM; \
         } \
      } \
      description { state: "pressed" 0.0; \
         inherit: "default" 0.0; \
         text.style: "list_text_main_press"; \
      } \
   )

#define PART_MAIN_TEXT_MULTILINE(NAME, LEFT, RIGHT, TOP) \
   PART(SPACER, "elm.padding.slide.end", \
      DESC_L(RIGHT, \
         fixed: 1 0; \
         min: 0 0; \
         max: 0 -1; \
      ) \
   ) \
   PART(RECT, "clipper.text", \
      description { state: "default" 0.0; \
         rel1 { \
            relative: 1.0 0.0; \
            to_x: LEFT; \
         } \
         rel2 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
         } \
      } \
   ) \
   PART(TEXTBLOCK, NAME, \
      clip_to: "clipper.text"; \
      description { state: "default" 0.0; \
         fixed: 1 0; \
         min: 0 LIST_TEXT_MAIN_HEIGHT_INC; \
         align: 0.5 0.5; \
         rel1 { \
            relative: 1.0 0.0; \
            to_x: LEFT; \
         } \
         rel2 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
         } \
         PARAM_TEXT("list_text_main_normal",) \
      } \
      description { state: "highlighting" 0.0; \
         inherit: "default"; \
      } \
      description { state: "highlighted" 0.0; \
         inherit: "highlighting"; \
         align: 0.5 1.0; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
            to_y: TOP; \
         } \
      } \
      description { state: "disabled" 0.0; \
         inherit: "default" 0.0; \
         text.style: "list_text_main_disabled"; \
      } \
      description { state: "highlighting_disabled" 0.0; \
         inherit: "disabled"; \
      } \
      description { state: "highlighted_disabled" 0.0; \
         inherit: "highlighting_disabled"; \
         align: 0.5 1.0; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
            to_y: TOP; \
         } \
      } \
      description { state: "slide" 0.0; \
         inherit: "highlighted" 0.0; \
         align: 0.0 1.0; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_1" 0.0; \
         inherit: "highlighted" 0.0; \
         align: 1.0 1.0; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_2" 0.0; \
         inherit: "highlighted" 0.0; \
         align: 0.0 1.0; \
         rel1 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 0.0 1.0; \
            to_x: "elm.padding.slide.end"; \
            to_y: TOP; \
         } \
      } \
      description { state: "slide_disabled" 0.0; \
         inherit: "highlighted_disabled" 0.0; \
         align: 0.0 1.0; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_1_disabled" 0.0; \
         inherit: "highlighted_disabled" 0.0; \
         align: 1.0 1.0; \
         rel1 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 1.0 1.0; \
            to_x: LEFT; \
            to_y: TOP; \
         } \
         text.min: 1 1; \
      } \
      description { state: "slide_2_disabled" 0.0; \
         inherit: "highlighted_disabled" 0.0; \
         align: 0.0 1.0; \
         rel1 { \
            relative: 0.0 1.0; \
            to_x: RIGHT; \
            to_y: TOP; \
         } \
         rel2 { \
            relative: 0.0 1.0; \
            to_x: "elm.padding.slide.end"; \
            to_y: TOP; \
         } \
      } \
      description { state: "pressed" 0.0; \
         inherit: "default" 0.0; \
         text.style: "list_text_main_press"; \
      } \
   )

#define PART_CLIPPER_SUBT_TEXT_MULTILINE(NAME, LEFT, RIGHT, TOP, BOTTOM) \
   PART(RECT, NAME, \
      DESC_LRTB(LEFT, RIGHT, TOP, BOTTOM, \
         visible: 0; \
      ) \
      description { state: "disabled" 0.0; \
         inherit: "default" 0.0; \
      } \
      description { state: "highlighting" 0.0; \
         inherit: "default" 0.0; \
         visible: 1; \
         color: 0 0 0 0; \
      } \
      description { state: "highlighting_disabled" 0.0; \
         inherit: "disabled" 0.0; \
         visible: 1; \
         color: 0 0 0 0; \
      } \
      description { state: "highlighted" 0.0; \
         inherit: "highlighting" 0.0; \
         color: 255 255 255 255; \
      } \
      description { state: "highlighted_disabled" 0.0; \
         inherit: "highlighting_disabled" 0.0; \
         color: 255 255 255 255; \
      } \
   )
