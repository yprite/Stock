const i18n_uchar* WclMapAllCitylistViewController::_findTextByUnicode(const i18n_uchar *str, i18n_uchar *substr)
{
    //WENTER();
    const int BUFFER_SIZE = 256;
    const i18n_uchar *pstr = str;
    int32_t substr_len = i18n_ustring_get_length(substr);
    int32_t str_len = i18n_ustring_get_length(str);
    i18n_usearch_h search = NULL;
    i18n_uchar u_matched[BUFFER_SIZE] = { 0, };
    int matched_text_len = 0;
    const char *locale;
    int ret = I18N_ERROR_NONE;

    ret = i18n_ulocale_get_default(&locale);
    if (ret != I18N_ERROR_NONE)
        locale = "en_GB";

    if (0 == substr_len)
        return pstr;
    else if (substr_len > str_len)
        return nullptr;

    i18n_uchar u_str_low[BUFFER_SIZE] = { 0, };
    i18n_uchar u_substr_low[BUFFER_SIZE] = { 0, };
    i18n_error_code_e err = I18N_ERROR_NONE;

    i18n_ustring_to_lower(u_str_low, BUFFER_SIZE, str, str_len, locale, &err);

    i18n_ustring_to_lower(u_substr_low, BUFFER_SIZE, substr, substr_len, locale, &err);

    i18n_usearch_create_new(u_substr_low, substr_len, u_str_low, str_len, locale, NULL, &search);

    int pos = 0;
    i18n_usearch_first(search, &pos);
    i18n_usearch_get_matched_text(search, u_matched, BUFFER_SIZE, &matched_text_len);
    if (matched_text_len > 0)
        return &pstr[pos];

    i18n_usearch_destroy(search);

    return nullptr;
}

void WclMapAllCitylistViewController::_updateCitylistWithSearchedText(const std::string text)
{
    WENTER();
    WDEBUG("text : %s", text.c_str());
    //elm_object_part_content_set(layout, "elm.swallow.content", genlist);
    //elm_object_part_content_unset(getEvasObject(), "elm.swallow.content");
    //if (_genlist)
    //{
    //   evas_object_del(_genlist);
    //    _genlist = nullptr;
    //}

    //_genlist = _setGenlist(getEvasObject());
    _searchedText = text;
    //std::string searchText = text;
    if (_searchedText.size() == 0)
    {
        if (_beforeSearchedText.size() == 0)
            return;
        _searchedText = _beforeSearchedText;
    }
    else
    {
        _beforeSearchedText = _searchedText;
        //_searchedText = text;
    }

    if (_genlist)
        elm_genlist_clear(_genlist);
    WDEBUG("_searchedText : %s", _searchedText.c_str());
    WDEBUG("_beforeSearchedText : %s", _beforeSearchedText.c_str());
    if (_sortedCitylist)
        _deleteSortedList();
    _getSortedCitylist();

    // -----------------------------------------------------------------------------------
    Evas_Object *genlist = _genlist;
    const int BUFFER_SIZE = 256;

    Elm_Genlist_Item_Class *itc_title = elm_genlist_item_class_new();
    itc_title->item_style = "title";
    itc_title->func.text_get = _getGenlistTitle;
    itc_title->func.content_get = NULL;
    itc_title->func.state_get = NULL;
    itc_title->func.del = NULL;

    Elm_Genlist_Item_Class *itc_search = elm_genlist_item_class_new();
    itc_search->item_style = "worldclock/title/search";
    itc_search->func.text_get = _getGenlistSearchTitle;
    //  itc_search->func.content_get = _search_image_get_cb;
    itc_search->func.content_get = NULL;
    itc_search->func.state_get = NULL;
    itc_search->func.del = NULL;

    Elm_Genlist_Item_Class *itc_group = elm_genlist_item_class_new();
    itc_group->item_style = "groupindex";
    itc_group->func.text_get = _getGenlistSearchedSubTitle;
    itc_group->func.content_get = NULL;
    itc_group->func.state_get = NULL;
    itc_group->func.del = NULL;

    Elm_Genlist_Item_Class *itc_item = elm_genlist_item_class_new();
    itc_item->item_style = "2text";
    itc_item->func.text_get = _getGenlistSearchedText;
    itc_item->func.content_get = nullptr;
    itc_item->func.state_get = nullptr;
    itc_item->func.del = nullptr;

    elm_genlist_item_append(genlist, itc_title, nullptr, nullptr, ELM_GENLIST_ITEM_GROUP, nullptr, nullptr);            // it is dummy item
    elm_genlist_item_append(genlist, itc_search, nullptr, nullptr, ELM_GENLIST_ITEM_NONE, _onSearchItemSelected, this);

    i18n_uchar ustr[BUFFER_SIZE] = {0, };
    i18n_uchar city_str[BUFFER_SIZE] = {0, };
    i18n_uchar country_str[BUFFER_SIZE] = {0, };

    i18n_ustring_copy_ua_n(ustr, _searchedText.c_str(), BUFFER_SIZE);

    std::vector<Cityinfo *> tmpList;

    Eina_List *l = nullptr;
    void *l_data = nullptr;
    Elm_Object_Item *genlist_item = nullptr;
    Elm_Object_Item *current_item = nullptr;
    int count = 0;
    EINA_LIST_FOREACH(_sortedCitylist, l, l_data)
    {
        Cityinfo *info = (Cityinfo *)l_data;
        i18n_ustring_copy_ua_n(city_str, W_(info->cityname_string), BUFFER_SIZE);
        i18n_ustring_copy_ua_n(country_str, W_(info->country_string), BUFFER_SIZE);
        if ((_findTextByUnicode(city_str, ustr) != nullptr) || (_findTextByUnicode(country_str, ustr) != nullptr))
        {
            //current_item = elm_genlist_item_append()
            WDEBUG("it is matched - city : %s, country : %s", info->cityname_eng, info->country_name);

            //gCityinfo = info;
            //this->_cityinfo = info;
            tmpList.push_back(info);
            //current_item = elm_genlist_item_append(genlist, itc_item, info, NULL, ELM_GENLIST_ITEM_NONE, _onGenlistItemSelected, this);
            //if (count == 0)
                //genlist_item = current_item;
            //++count;
        }
    }

    gSearchCount = tmpList.size();
    elm_genlist_item_append(genlist, itc_group, nullptr, nullptr, ELM_GENLIST_ITEM_NONE, nullptr, nullptr);
    for (size_t i = 0; i < tmpList.size(); ++i)
    {
        Cityinfo *info = tmpList[i];
        current_item = elm_genlist_item_append(genlist, itc_item, info, NULL, ELM_GENLIST_ITEM_NONE, _onGenlistItemSelected, this);
        if (count == 0)
            genlist_item = current_item;
        ++count;
    }

    WDEBUG("finish searching text.");
    ecore_timer_add(0.4, [](void *data)->Eina_Bool
    {
        Elm_Object_Item* item = (Elm_Object_Item *)data;
        if (item)
            elm_genlist_item_show(item, ELM_GENLIST_ITEM_SCROLLTO_MIDDLE);
        return ECORE_CALLBACK_CANCEL;
    }, genlist_item);
    WDEBUG("finish ecore_timer");

    evas_object_show(genlist);

    elm_genlist_item_class_free(itc_title);
    elm_genlist_item_class_free(itc_search);
    elm_genlist_item_class_free(itc_group);
    elm_genlist_item_class_free(itc_item);

    //elm_object_part_content_set(getEvasObject(), "elm.swallow.content", _genlist);
}

std::string WclMapAllCitylistViewController::_getHilightedText(const char* str, const char *search_str)
{
    const char *tmp = NULL;
    const char *pre_str = NULL;
    char buf[256] = { 0, };
    char str_tag_added[256] = { 0, };

    pre_str = str;
    tmp = (const char *) strcasestr(pre_str, search_str);
    if (tmp != NULL)
    {
        /* Get T105 color rgba from theme */
        char color_tag[256] = { 0, };
        snprintf(color_tag, sizeof(color_tag), "<match>");

        /* append characters before matched string */
        if (tmp != pre_str)
        {
            buf[0] = '\0';
            strncat(buf, pre_str, tmp - pre_str);
            sncat(str_tag_added, 256, buf);
        }

        /* highlight str */
        sncat(str_tag_added, 256, color_tag);
        buf[0] = '\0';
        strncat(buf, tmp, strlen(search_str));
        sncat(str_tag_added, 256, buf);
        sncat(str_tag_added, 256, "</match>");

        /* set pointer after matched string */
        pre_str = tmp + strlen(search_str);
    }

    sncat(str_tag_added, 256, pre_str);
    return std::string(str_tag_added);
}
